const TILE_SIZE = 40;

/*
	A monad is a tile. This class describes an actual tile instance on the screen, and contains
	a reference to its type, which is a unique instance of MonadType that is shared between tiles.
	
	Also contains logica about apply a monster munching action.
*/
class Monad {
	field x;
	field y;
	field type;
	field size;
	field playScene;
	
	constructor(x, y, size, type, playScene) {
		this.x = x;
		this.y = y;
		this.size = size;
		this.type = type;
		this.playScene = playScene;
	}
	
	/*
		Applies monster munching action.
	*/
	function munch() {
		cols = this.playScene.cols;
		rows = this.playScene.rows;
		grid = this.playScene.grid;
		playerSize = this.playScene.playerSize;
		
		if (playerSize == grid.length) {
			this.playScene.triggerWinScene();
			return;
		}
		
		if (this.size == playerSize) {
			// attempting to munch 1
			if (this.type.id == '1111') {
				// grow!
				this.playScene.growPlayer();
				// growPlayer is also used when the user presses '+', so the grow text
				// needs to be triggered independently.
				this.playScene.triggerGrowText();
				
			} else {
				// flip things around
				for (flip : this.type.flips) {
					flip.perform(this, grid);
				}
			}
		} else if (playerSize / 2 == this.size) {
			// attempting to munch 4
			result = null;
			allSameSize = true;
			for (xOffset : [0, this.size]) {
				for (yOffset : [0, this.size]) {
					cell = grid[this.x + xOffset][this.y + yOffset];
					if (cell.size != this.size) {
						allSameSize = false;
					}
				}
			}
			
			if (allSameSize) {
				ids = [];
				for (xOffset : [0, this.size]) {
					for (yOffset : [0, this.size]) {
						x = this.x + xOffset;
						y = this.y + yOffset;
						ids.add(grid[x][y].type.color);
						grid[x][y] = null;
					}
				}
				id = MonadType.canonicalizeIds(ids);
				result = new Monad(this.x, this.y, this.size * 2, MonadType.MONADS_BY_ID[id], this.playScene);
				grid[this.x][this.y] = result;
			}
		} else {
			// can't munch 16 or more
		}
	}
	
	/*
		Draws this tile to the screen. The parent scene may have special offset information which is passed in here.
	*/
	function render(xOffset, yOffset) {
		x = this.x * TILE_SIZE + xOffset;
		y = this.y * TILE_SIZE + yOffset;
		side = TILE_SIZE * this.size;
		this.type.image.drawStretched(x, y, side, side);
	}
}
